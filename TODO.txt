TODO:
    - [DONE] complete the implementation of the function crop_mDoppler
    and crop_rdn in preprocessing/DataReader.py
    - [DONE] complete the implementation of the function padding_rdn,
    padding_mDoppler, cut_time in preprocessing/DataProcess.py
    - [DONE] complete the implementation of the functions of
    preprocessing/dataset.py
    - check the parameters of CNN-MD in models/cnn_md.py
    - [DONE - TO BE CHECKED] copy-paste the code of models/cnn_md.py
    in models/cnn_rdn.py and modify the parameters
    - [DONE] complete the functions
    in models/classifier.py
    - [DONE] write the main function in ./train.py
    - [DONE] run the code in and check the results
    - [DONE] complete the augmentation by resampling
    - implementation of the functions to augment the dataset
    - [DONE] add check after augmentation to avoid repetition of the same
    sample in the training set
    - correct the model in models/cnn_rdn.py to have the same
    architecture as the one in models/cnn_md.py
    - [Part. DONE] correct cases in models/classifier.py to have the same
    object as case 2 (torch.utils.data.Subset) (maybe add randomness)
    - correct models/cnn_md.py and models/cnn_rdn.py to take two
    maps together as input (in_channels = 2)
    - [DONE, used same classes but passed data batch by batch] correct
    preprocessing/* to process data batch by batch
    - [DONE] correct models/classifier.py to process data batch by batch
    (use get_item function from pytorch)
    - correct preprocessing/dataset.py to take two maps together
    as input (or create a new object maybe? depending on the case you
    choose)
    - [DONE, to be checked, try to plot the signals] take 40 frames
    not random but based on a threshold method
    - [DONE] agglomerate labels to have 10 classes
    - time and frequency masking in utils/augmentation.py (maybe
    warping too)
